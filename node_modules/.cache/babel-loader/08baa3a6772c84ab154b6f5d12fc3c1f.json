{"ast":null,"code":"import _asyncToGenerator from \"/app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.array.slice.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from \"axios\";\nexport default {\n  data: function data() {\n    return {\n      /**\n       * @type {number} ページネーションのページを指定\n       */\n      page: 1,\n\n      /**\n       * @type {number} ページネーションの一ページあたりに入れるタスクの数を指定\n       */\n      pageSize: 7,\n\n      /**\n       * @type {number} ページネーションのページ数を指定\n       */\n      length: 0,\n\n      /**\n       * @type {Array} ユーザのすべてのタスクを格納\n       */\n      tasks: [],\n\n      /**\n       * @type {String} エラーメッセージを格納\n       */\n      errorMessage: \"\",\n\n      /**\n       * @type {Array} 表示するタスクのリストを格納\n       */\n      displayList: [],\n      loading1: false,\n      loading2: false,\n      loading3: false,\n      loading4: false,\n      loading5: false,\n      loading6: false,\n      loading7: false\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.getTasks();\n\n            case 2:\n              _this.length = Math.ceil(_this.tasks.length / _this.pageSize);\n              _this.displayList = _this.tasks.slice(0, _this.pageSize);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  methods: {\n    /**\n     * すべてのタスクを取得する関数\n     */\n    getTasks: function getTasks() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return axios.get(\"/api/v1/tasks\", {\n                  headers: {\n                    \"access-token\": _this2.$cookies.get(\"access-token\"),\n                    client: _this2.$cookies.get(\"client\"),\n                    uid: _this2.$cookies.get(\"uid\")\n                  }\n                }).then(function (response) {\n                  // console.log(response);\n                  _this2.tasks = response.data.data;\n\n                  _this2.$store.commit(\"setTasks\", response.data.data); // // console.log(this.tasks);\n\n                }).catch(function (error) {\n                  console.error(error);\n                  console.error(error.response);\n                  _this2.errorMessage = error.response.data.errors[0];\n                  console.error(_this2.errorMessage);\n                });\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    pageChange: function pageChange(pageNumber) {\n      this.displayList = this.tasks.slice(this.pageSize * (pageNumber - 1), this.pageSize * pageNumber);\n    },\n    reserve: function reserve() {\n      var _this3 = this;\n\n      this.loading = true;\n      setTimeout(function () {\n        return _this3.loading = false;\n      }, 2000);\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA;AAEA;AACAA;AAAA;AACA;AACA;AACA;AACAC,aAJA;;AAKA;AACA;AACA;AACAC,iBARA;;AASA;AACA;AACA;AACAC,eAZA;;AAaA;AACA;AACA;AACAC,eAhBA;;AAiBA;AACA;AACA;AACAC,sBApBA;;AAqBA;AACA;AACA;AACAC,qBAxBA;AAyBAC,qBAzBA;AA0BAC,qBA1BA;AA2BAC,qBA3BA;AA4BAC,qBA5BA;AA6BAC,qBA7BA;AA8BAC,qBA9BA;AA+BAC;AA/BA;AAAA,GADA;AAkCAC,SAlCA,qBAkCA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACA,gBADA;;AAAA;AAEA;AACA;;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,GAtCA;AAuCAC;AACA;AACA;AACA;AACAC,YAJA,sBAIA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACAC,MACAC,GADA,CACA,eADA,EACA;AACAC;AACA,uEADA;AAEAC,yDAFA;AAGAC;AAHA;AADA,iBADA,EAQAC,IARA,CAQA;AACA;AACA;;AACA,uEAHA,CAIA;;AACA,iBAbA,EAcAC,KAdA,CAcA;AACAC;AACAA;AACA;AACAA;AACA,iBAnBA,CADA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA,KAzBA;AA0BAC,cA1BA,sBA0BAC,UA1BA,EA0BA;AACA,0CACA,gCADA,EAEA,0BAFA;AAIA,KA/BA;AAgCAC,WAhCA,qBAgCA;AAAA;;AACA;AAEAC;AAAA;AAAA;AACA;AApCA;AAvCA","names":["data","page","pageSize","length","tasks","errorMessage","displayList","loading1","loading2","loading3","loading4","loading5","loading6","loading7","mounted","methods","getTasks","axios","get","headers","client","uid","then","catch","console","pageChange","pageNumber","reserve","setTimeout"],"sourceRoot":"src/components/Record","sources":["RecordPage.vue"],"sourcesContent":["<template>\n  <div>\n    <h1 class=\"text-center mt-5 mb-5\">記録</h1>\n\n    <v-card class=\"mx-auto\" max-width=\"1200\">\n      <v-row>\n        <v-col\n          v-for=\"(task, i) in displayList\"\n          :key=\"i\"\n          align=\"center\"\n          cols=\"12\"\n          sm=\"12\"\n          md=\"6\"\n          lg=\"6\"\n        >\n          <v-card\n            :loading=\"loading\"\n            @click=\"reserve(i)\"\n            outlined\n            min-width=\"240\"\n            min-height=\"240\"\n            max-width=\"500\"\n            height=\"100%\"\n            class=\"d-flex flex-column\"\n          >\n            <template slot=\"progress\">\n              <v-progress-linear\n                color=\"deep-purple\"\n                height=\"10\"\n                indeterminate\n              ></v-progress-linear>\n            </template>\n\n            <v-card-title class=\"justify-center\" v-text=\"task.name\" />\n            <v-spacer />\n            <p class=\"text-center\">Click me</p>\n          </v-card>\n        </v-col>\n      </v-row>\n      <v-pagination\n        v-model=\"page\"\n        :length=\"length\"\n        @input=\"pageChange\"\n      ></v-pagination>\n    </v-card>\n  </div>\n</template>\n\n<script>\n  import axios from \"axios\";\n\n  export default {\n    data: () => ({\n      /**\n       * @type {number} ページネーションのページを指定\n       */\n      page: 1,\n      /**\n       * @type {number} ページネーションの一ページあたりに入れるタスクの数を指定\n       */\n      pageSize: 7,\n      /**\n       * @type {number} ページネーションのページ数を指定\n       */\n      length: 0,\n      /**\n       * @type {Array} ユーザのすべてのタスクを格納\n       */\n      tasks: [],\n      /**\n       * @type {String} エラーメッセージを格納\n       */\n      errorMessage: \"\",\n      /**\n       * @type {Array} 表示するタスクのリストを格納\n       */\n      displayList: [],\n      loading1: false,\n      loading2: false,\n      loading3: false,\n      loading4: false,\n      loading5: false,\n      loading6: false,\n      loading7: false,\n    }),\n    async mounted() {\n      await this.getTasks();\n      this.length = Math.ceil(this.tasks.length / this.pageSize);\n      this.displayList = this.tasks.slice(0, this.pageSize);\n    },\n    methods: {\n      /**\n       * すべてのタスクを取得する関数\n       */\n      async getTasks() {\n        await axios\n          .get(\"/api/v1/tasks\", {\n            headers: {\n              \"access-token\": this.$cookies.get(\"access-token\"),\n              client: this.$cookies.get(\"client\"),\n              uid: this.$cookies.get(\"uid\"),\n            },\n          })\n          .then((response) => {\n            // console.log(response);\n            this.tasks = response.data.data;\n            this.$store.commit(\"setTasks\", response.data.data);\n            // // console.log(this.tasks);\n          })\n          .catch((error) => {\n            console.error(error);\n            console.error(error.response);\n            this.errorMessage = error.response.data.errors[0];\n            console.error(this.errorMessage);\n          });\n      },\n      pageChange(pageNumber) {\n        this.displayList = this.tasks.slice(\n          this.pageSize * (pageNumber - 1),\n          this.pageSize * pageNumber\n        );\n      },\n      reserve() {\n        this.loading = true;\n\n        setTimeout(() => (this.loading = false), 2000);\n      },\n    },\n  };\n</script>\n"]},"metadata":{},"sourceType":"module"}