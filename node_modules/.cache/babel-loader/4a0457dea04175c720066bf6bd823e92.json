{"ast":null,"code":"import _asyncToGenerator from \"/app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.array.slice.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from \"axios\";\nexport default {\n  data: function data() {\n    return {\n      page: 1,\n      pageSize: 5,\n      length: 0,\n      tasks: [],\n      errorMessage: \"\",\n      model: 1,\n      displayList: []\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.getTasks();\n\n            case 2:\n              _this.length = Math.ceil(_this.tasks.length / _this.pageSize);\n              _this.displayList = _this.tasks.slice(0, _this.pageSize);\n              console.log(length, displayList);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  methods: {\n    /**\n     * すべてのタスクを取得する関数\n     */\n    getTasks: function getTasks() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                axios.get(\"/api/v1/tasks\", {\n                  headers: {\n                    \"access-token\": _this2.$cookies.get(\"access-token\"),\n                    client: _this2.$cookies.get(\"client\"),\n                    uid: _this2.$cookies.get(\"uid\")\n                  }\n                }).then(function (response) {\n                  console.log(response);\n                  _this2.tasks = response.data.data;\n\n                  _this2.$store.commit(\"setTasks\", response.data.data);\n\n                  console.log(_this2.tasks);\n                }).catch(function (error) {\n                  console.error(error);\n                  console.error(error.response);\n                  _this2.errorMessage = error.response.data.errors[0];\n                  console.error(_this2.errorMessage);\n                });\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    pageChange: function pageChange(pageNumber) {\n      this.displayList = this.tasks.slice(this.pageSize * (pageNumber - 1), this.pageSize * pageNumber);\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;AAEA;AACAA;AAAA;AACAC,aADA;AAEAC,iBAFA;AAGAC,eAHA;AAIAC,eAJA;AAKAC,sBALA;AAMAC,cANA;AAOAC;AAPA;AAAA,GADA;AAUAC,SAVA,qBAUA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACA,gBADA;;AAAA;AAEA;AACA;AACAC;;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA,GAfA;AAgBAC;AACA;AACA;AACA;AACAC,YAJA,sBAIA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACAC,sBACAC,GADA,CACA,eADA,EACA;AACAC;AACA,uEADA;AAEAC,yDAFA;AAGAC;AAHA;AADA,iBADA,EAQAC,IARA,CAQA;AACAR;AACA;;AACA;;AACAA;AACA,iBAbA,EAcAS,KAdA,CAcA;AACAT;AACAA;AACA;AACAA;AACA,iBAnBA;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA,KAzBA;AA0BAU,cA1BA,sBA0BAC,UA1BA,EA0BA;AACA,0CACA,gCADA,EAEA,0BAFA;AAIA;AA/BA;AAhBA","names":["data","page","pageSize","length","tasks","errorMessage","model","displayList","mounted","console","methods","getTasks","axios","get","headers","client","uid","then","catch","pageChange","pageNumber"],"sourceRoot":"src/components","sources":["TaskListPage.vue"],"sourcesContent":["<template>\n  <div>\n    <h1 class=\"text-center mt-5 mb-5\">タスクリスト</h1>\n\n    <v-card class=\"mx-auto\" max-width=\"500\">\n      <v-list flat outline>\n        <v-list-item-group v-model=\"model\">\n          <v-list-item\n            v-for=\"(task, i) in displayList\"\n            :key=\"i\"\n            link\n            :to=\"'task/' + task.id\"\n          >\n            <v-list-item-icon>\n              <v-icon>mdi-clipboard-outline</v-icon>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title v-text=\"task.name\"></v-list-item-title>\n            </v-list-item-content>\n            <v-btn icon ripple @click=\"deleteTodo(index)\">\n              <v-icon color=\"grey lighten-1\">mdi-delete</v-icon>\n            </v-btn>\n          </v-list-item>\n        </v-list-item-group>\n      </v-list>\n      <v-pagination\n        v-model=\"page\"\n        :length=\"length\"\n        @input=\"pageChange\"\n      ></v-pagination>\n    </v-card>\n  </div>\n</template>\n\n<script>\n  import axios from \"axios\";\n\n  export default {\n    data: () => ({\n      page: 1,\n      pageSize: 5,\n      length: 0,\n      tasks: [],\n      errorMessage: \"\",\n      model: 1,\n      displayList: [],\n    }),\n    async mounted() {\n      await this.getTasks();\n      this.length = Math.ceil(this.tasks.length / this.pageSize);\n      this.displayList = this.tasks.slice(0, this.pageSize);\n      console.log(length, displayList);\n    },\n    methods: {\n      /**\n       * すべてのタスクを取得する関数\n       */\n      async getTasks() {\n        axios\n          .get(\"/api/v1/tasks\", {\n            headers: {\n              \"access-token\": this.$cookies.get(\"access-token\"),\n              client: this.$cookies.get(\"client\"),\n              uid: this.$cookies.get(\"uid\"),\n            },\n          })\n          .then((response) => {\n            console.log(response);\n            this.tasks = response.data.data;\n            this.$store.commit(\"setTasks\", response.data.data);\n            console.log(this.tasks);\n          })\n          .catch((error) => {\n            console.error(error);\n            console.error(error.response);\n            this.errorMessage = error.response.data.errors[0];\n            console.error(this.errorMessage);\n          });\n      },\n      pageChange(pageNumber) {\n        this.displayList = this.tasks.slice(\n          this.pageSize * (pageNumber - 1),\n          this.pageSize * pageNumber\n        );\n      },\n    },\n  };\n</script>\n"]},"metadata":{},"sourceType":"module"}