{"ast":null,"code":"import _asyncToGenerator from \"/app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.keys.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from \"axios\";\nimport moment from \"moment\";\nexport default {\n  data: function data() {\n    return {\n      /**\n       * @type {number} ページネーションのページを指定\n       */\n      page: 1,\n\n      /**\n       * @type {number} ページネーションの一ページあたりに入れるタスクの数を指定\n       */\n      pageSize: 6,\n\n      /**\n       * @type {number} ページネーションのページ数を指定\n       */\n      length: 0,\n\n      /**\n       * @type {Array} ユーザのすべてのタスクを格納\n       */\n      tasks: [],\n\n      /**\n       * @type {String} エラーメッセージを格納\n       */\n      errorMessage: \"\",\n\n      /**\n       * @type {Array} 表示するタスクのリストを格納\n       */\n      displayList: [],\n      loading: {\n        \"0\": false,\n        \"1\": false,\n        \"2\": false,\n        \"3\": false,\n        \"4\": false,\n        \"5\": false\n      },\n      complete: {\n        \"0\": false,\n        \"1\": false,\n        \"2\": false,\n        \"3\": false,\n        \"4\": false,\n        \"5\": false\n      }\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.getTasks();\n\n            case 2:\n              _this.length = Math.ceil(_this.tasks.length / _this.pageSize);\n              _this.displayList = _this.tasks.slice(0, _this.pageSize);\n\n              _this.isDisplayTasksCompeted();\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  methods: {\n    /**\n     * すべてのタスクを取得する関数\n     */\n    getTasks: function getTasks() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return axios.get(\"/api/v1/tasks\", {\n                  headers: {\n                    \"access-token\": _this2.$cookies.get(\"access-token\"),\n                    client: _this2.$cookies.get(\"client\"),\n                    uid: _this2.$cookies.get(\"uid\")\n                  }\n                }).then(function (response) {\n                  console.log(response);\n                  _this2.tasks = response.data.data;\n\n                  _this2.$store.commit(\"setTasks\", response.data.data); // // console.log(this.tasks);\n\n                }).catch(function (error) {\n                  console.error(error);\n                  console.error(error.response);\n                  _this2.errorMessage = error.response.data.errors[0];\n                  console.error(_this2.errorMessage);\n                });\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    pageChange: function pageChange(pageNumber) {\n      this.displayList = this.tasks.slice(this.pageSize * (pageNumber - 1), this.pageSize * pageNumber);\n      this.isDisplayTasksCompeted();\n    },\n    reserve: function reserve(i) {\n      var _this3 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var time;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this3.loading[String(i)] = true;\n                time = new Date().getTime() / 1000;\n                console.log(time);\n                _this3.complete[String(i)] = true; // await axios\n                //   .put(\n                //     \"/api/v1/tasks/\",\n                //     {\n                //       task: {\n                //         last_time: time,\n                //       },\n                //     },\n                //     {\n                //       headers: {\n                //         \"access-token\": this.$cookies.get(\"access-token\"),\n                //         client: this.$cookies.get(\"client\"),\n                //         uid: this.$cookies.get(\"uid\"),\n                //       },\n                //     }\n                //   )\n                //   .then((response) => {\n                //     console.log(response);\n                //   })\n                //   .catch((error) => {\n                //     console.error(error);\n                //     console.error(error.response);\n                //     this.errorMessage = error.response.data.errors[0];\n                //     console.error(this.errorMessage);\n                //   });\n\n                setTimeout(function () {\n                  return _this3.loading[String(i)] = false;\n                }, 2000);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    },\n\n    /**\n     * 表示されているタスクが達成済みかどうかを判断する\n     */\n    isDisplayTasksCompeted: function isDisplayTasksCompeted() {\n      var _this4 = this;\n\n      Object.keys(this.complete).forEach(function (key) {\n        if (_this4.displayList[key] === undefined) {\n          return;\n        }\n\n        var time = moment(_this4.displayList[key].last_time); // taskのlast_timeがnullでない かつ 前回の記録日の日付が今日の日付と同じかどうか\n\n        if (time.isValid() && time.isSame(moment(), \"day\")) {\n          //\n          console.log(time.isSame(moment(), \"day\"));\n          _this4.complete[key] = true;\n        } else {\n          _this4.complete[key] = false;\n        }\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyDA;AACA;AAEA;AACAA;AAAA;AACA;AACA;AACA;AACAC,aAJA;;AAKA;AACA;AACA;AACAC,iBARA;;AASA;AACA;AACA;AACAC,eAZA;;AAaA;AACA;AACA;AACAC,eAhBA;;AAiBA;AACA;AACA;AACAC,sBApBA;;AAqBA;AACA;AACA;AACAC,qBAxBA;AAyBAC;AACA,kBADA;AAEA,kBAFA;AAGA,kBAHA;AAIA,kBAJA;AAKA,kBALA;AAMA;AANA,OAzBA;AAiCAC;AACA,kBADA;AAEA,kBAFA;AAGA,kBAHA;AAIA,kBAJA;AAKA,kBALA;AAMA;AANA;AAjCA;AAAA,GADA;AA2CAC,SA3CA,qBA2CA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACA,gBADA;;AAAA;AAEA;AACA;;AAEA;;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,GAjDA;AAkDAC;AACA;AACA;AACA;AACAC,YAJA,sBAIA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACAC,MACAC,GADA,CACA,eADA,EACA;AACAC;AACA,uEADA;AAEAC,yDAFA;AAGAC;AAHA;AADA,iBADA,EAQAC,IARA,CAQA;AACAC;AACA;;AACA,uEAHA,CAIA;;AACA,iBAbA,EAcAC,KAdA,CAcA;AACAD;AACAA;AACA;AACAA;AACA,iBAnBA,CADA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA,KAzBA;AA0BAE,cA1BA,sBA0BAC,UA1BA,EA0BA;AACA,0CACA,gCADA,EAEA,0BAFA;AAIA;AACA,KAhCA;AAiCAC,WAjCA,mBAiCAC,CAjCA,EAiCA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACAC,oBAFA,GAEA,2BAFA;AAGAN;AACA,kDAJA,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAO;AAAA;AAAA;;AAhCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiCA,KAlEA;;AAmEA;AACA;AACA;AACAC,0BAtEA,oCAsEA;AAAA;;AACAC;AACA;AACA;AACA;;AACA,6DAJA,CAMA;;AACA;AACA;AACAT;AAEA;AACA,SALA,MAKA;AACA;AACA;AACA,OAfA;AAgBA;AAvFA;AAlDA","names":["data","page","pageSize","length","tasks","errorMessage","displayList","loading","complete","mounted","methods","getTasks","axios","get","headers","client","uid","then","console","catch","pageChange","pageNumber","reserve","i","time","setTimeout","isDisplayTasksCompeted","Object"],"sourceRoot":"src/components/Record","sources":["RecordPage.vue"],"sourcesContent":["<template>\n  <div>\n    <h1 class=\"text-center mt-5 mb-5\">記録</h1>\n\n    <v-card class=\"mx-auto pb-5 mb-5\" max-width=\"1200\">\n      <v-row>\n        <v-col\n          v-for=\"(task, i) in displayList\"\n          :key=\"i\"\n          align=\"center\"\n          cols=\"12\"\n          sm=\"12\"\n          md=\"6\"\n          lg=\"6\"\n        >\n          <v-card\n            hover\n            :loading=\"loading[String(i)]\"\n            @click=\"reserve(i)\"\n            outlined\n            min-width=\"240\"\n            min-height=\"240\"\n            max-width=\"500\"\n            height=\"100%\"\n            class=\"d-flex flex-column\"\n          >\n            <template slot=\"progress\">\n              <v-progress-linear\n                color=\"deep-purple\"\n                height=\"10\"\n                indeterminate\n              ></v-progress-linear>\n            </template>\n\n            <v-card-title class=\"justify-center\" v-text=\"task.name\" />\n            <v-spacer />\n            <p v-if=\"!complete[String(i)]\" class=\"text-center\">Click me</p>\n            <v-icon\n              v-if=\"complete[String(i)]\"\n              x-large\n              color=\"success\"\n              class=\"mb-5\"\n              >mdi-check-circle-outline</v-icon\n            >\n          </v-card>\n        </v-col>\n      </v-row>\n      <v-pagination\n        v-model=\"page\"\n        :length=\"length\"\n        @input=\"pageChange\"\n      ></v-pagination>\n    </v-card>\n  </div>\n</template>\n\n<script>\n  import axios from \"axios\";\n  import moment from \"moment\";\n\n  export default {\n    data: () => ({\n      /**\n       * @type {number} ページネーションのページを指定\n       */\n      page: 1,\n      /**\n       * @type {number} ページネーションの一ページあたりに入れるタスクの数を指定\n       */\n      pageSize: 6,\n      /**\n       * @type {number} ページネーションのページ数を指定\n       */\n      length: 0,\n      /**\n       * @type {Array} ユーザのすべてのタスクを格納\n       */\n      tasks: [],\n      /**\n       * @type {String} エラーメッセージを格納\n       */\n      errorMessage: \"\",\n      /**\n       * @type {Array} 表示するタスクのリストを格納\n       */\n      displayList: [],\n      loading: {\n        \"0\": false,\n        \"1\": false,\n        \"2\": false,\n        \"3\": false,\n        \"4\": false,\n        \"5\": false,\n      },\n      complete: {\n        \"0\": false,\n        \"1\": false,\n        \"2\": false,\n        \"3\": false,\n        \"4\": false,\n        \"5\": false,\n      },\n    }),\n    async mounted() {\n      await this.getTasks();\n      this.length = Math.ceil(this.tasks.length / this.pageSize);\n      this.displayList = this.tasks.slice(0, this.pageSize);\n\n      this.isDisplayTasksCompeted();\n    },\n    methods: {\n      /**\n       * すべてのタスクを取得する関数\n       */\n      async getTasks() {\n        await axios\n          .get(\"/api/v1/tasks\", {\n            headers: {\n              \"access-token\": this.$cookies.get(\"access-token\"),\n              client: this.$cookies.get(\"client\"),\n              uid: this.$cookies.get(\"uid\"),\n            },\n          })\n          .then((response) => {\n            console.log(response);\n            this.tasks = response.data.data;\n            this.$store.commit(\"setTasks\", response.data.data);\n            // // console.log(this.tasks);\n          })\n          .catch((error) => {\n            console.error(error);\n            console.error(error.response);\n            this.errorMessage = error.response.data.errors[0];\n            console.error(this.errorMessage);\n          });\n      },\n      pageChange(pageNumber) {\n        this.displayList = this.tasks.slice(\n          this.pageSize * (pageNumber - 1),\n          this.pageSize * pageNumber\n        );\n        this.isDisplayTasksCompeted();\n      },\n      async reserve(i) {\n        this.loading[String(i)] = true;\n        const time = new Date().getTime() / 1000;\n        console.log(time);\n        this.complete[String(i)] = true;\n\n        // await axios\n        //   .put(\n        //     \"/api/v1/tasks/\",\n        //     {\n        //       task: {\n        //         last_time: time,\n        //       },\n        //     },\n        //     {\n        //       headers: {\n        //         \"access-token\": this.$cookies.get(\"access-token\"),\n        //         client: this.$cookies.get(\"client\"),\n        //         uid: this.$cookies.get(\"uid\"),\n        //       },\n        //     }\n        //   )\n        //   .then((response) => {\n        //     console.log(response);\n        //   })\n        //   .catch((error) => {\n        //     console.error(error);\n        //     console.error(error.response);\n        //     this.errorMessage = error.response.data.errors[0];\n        //     console.error(this.errorMessage);\n        //   });\n\n        setTimeout(() => (this.loading[String(i)] = false), 2000);\n      },\n      /**\n       * 表示されているタスクが達成済みかどうかを判断する\n       */\n      isDisplayTasksCompeted() {\n        Object.keys(this.complete).forEach((key) => {\n          if (this.displayList[key] === undefined) {\n            return;\n          }\n          const time = moment(this.displayList[key].last_time);\n\n          // taskのlast_timeがnullでない かつ 前回の記録日の日付が今日の日付と同じかどうか\n          if (time.isValid() && time.isSame(moment(), \"day\")) {\n            //\n            console.log(time.isSame(moment(), \"day\"));\n\n            this.complete[key] = true;\n          } else {\n            this.complete[key] = false;\n          }\n        });\n      },\n    },\n  };\n</script>\n"]},"metadata":{},"sourceType":"module"}