{"ast":null,"code":"import _asyncToGenerator from \"/app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.function.name.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from \"axios\";\nexport default {\n  data: function data() {\n    return {\n      task: {},\n      taskId: 0\n    };\n  },\n  mounted: function mounted() {\n    if (this.$store.getters.getTasks.length == 0 || !this.$route.params[\"id\"]) {\n      this.$router.push(\"/task_list\");\n    } else {\n      // paramからタスクのIDを取得(文字列であることに注意)\n      this.taskId = Number(this.$route.params[\"id\"]); // vuexのストアからタスクIDでタスクを取得する\n\n      this.task = this.$store.getters.getTaskFromId(this.taskId);\n      console.log(this.task);\n    }\n  },\n  computed: {\n    isSameTaskName: function isSameTaskName() {\n      return this.task.name === this.taskName;\n    }\n  },\n  methods: {\n    /**\n     * タスクを編集するための関数です\n     */\n    updateTask: function updateTask() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios.put(\"/api/v1/tasks/\".concat(_this.task.id), {\n                  task: {\n                    name: _this.taskName\n                  }\n                }, {\n                  headers: {\n                    \"access-token\": _this.$cookies.get(\"access-token\"),\n                    client: _this.$cookies.get(\"client\"),\n                    uid: _this.$cookies.get(\"uid\")\n                  }\n                }).then(function (response) {\n                  console.log(response);\n\n                  _this.$router.push(\"/task_list\");\n                }).catch(function (error) {\n                  console.error(error);\n                  console.error(error.response);\n                  _this.errorMessage = error.response.data.errors[0];\n                  console.error(_this.errorMessage);\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n\n    /**\n     * タスクを削除するための関数です\n     */\n    deleteTask: function deleteTask() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return axios.delete(\"/api/v1/tasks/\".concat(_this2.task.id), {\n                  headers: {\n                    \"access-token\": _this2.$cookies.get(\"access-token\"),\n                    client: _this2.$cookies.get(\"client\"),\n                    uid: _this2.$cookies.get(\"uid\")\n                  }\n                }).then(function (response) {\n                  console.log(response);\n\n                  _this2.$router.push(\"/task_list\");\n                }).catch(function (error) {\n                  console.error(error);\n                  console.error(error.response);\n                  _this2.errorMessage = error.response.data.errors[0];\n                  console.error(_this2.errorMessage);\n                });\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAoBA;AAEA;AACAA;AAAA;AACAC,cADA;AAEAC;AAFA;AAAA,GADA;AAKAC,SALA,qBAKA;AACA,QACA,4CACA,yBAFA,EAGA;AACA;AACA,KALA,MAKA;AACA;AACA,qDAFA,CAGA;;AACA;AACAC;AACA;AACA,GAlBA;AAmBAC;AACAC,kBADA,4BACA;AACA;AACA;AAHA,GAnBA;AAwBAC;AACA;AACA;AACA;AACAC,cAJA,wBAIA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACAC,MACAC,GADA,yBAEA,aAFA,GAGA;AACAT;AACAU;AADA;AADA,iBAHA,EAQA;AACAC;AACA,sEADA;AAEAC,wDAFA;AAGAC;AAHA;AADA,iBARA,EAgBAC,IAhBA,CAgBA;AACAX;;AACA;AACA,iBAnBA,EAoBAY,KApBA,CAoBA;AACAZ;AACAA;AACA;AACAA;AACA,iBAzBA,CADA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BA,KA/BA;;AAgCA;AACA;AACA;AACAa,cAnCA,wBAmCA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACAR,MACAS,MADA,yBACA,cADA,GACA;AACAN;AACA,uEADA;AAEAC,yDAFA;AAGAC;AAHA;AADA,iBADA,EAQAC,IARA,CAQA;AACAX;;AACA;AACA,iBAXA,EAYAY,KAZA,CAYA;AACAZ;AACAA;AACA;AACAA;AACA,iBAjBA,CADA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AAtDA;AAxBA","names":["data","task","taskId","mounted","console","computed","isSameTaskName","methods","updateTask","axios","put","name","headers","client","uid","then","catch","deleteTask","delete"],"sourceRoot":"src/components","sources":["TaskPage.vue"],"sourcesContent":["<template>\n  <div>\n    <h1 class=\"text-center mt-5 mb-5\">タスク</h1>\n    <v-card class=\"mx-auto px-5 py-5\" max-width=\"500\">\n      <h2>{{ task.name }}</h2>\n\n      <v-btn\n        class=\"mt-5 mr-4\"\n        color=\"primary\"\n        link\n        :to=\"'/task_edit/' + taskId\"\n      >\n        <v-icon>mdi-cached</v-icon>更新 or <v-icon>mdi-delete</v-icon>削除\n      </v-btn>\n      <v-btn class=\"mt-5\" link color=\"info\" to=\"/task_list\">リストに戻る</v-btn>\n    </v-card>\n  </div>\n</template>\n\n<script>\n  import axios from \"axios\";\n\n  export default {\n    data: () => ({\n      task: {},\n      taskId: 0,\n    }),\n    mounted() {\n      if (\n        this.$store.getters.getTasks.length == 0 ||\n        !this.$route.params[\"id\"]\n      ) {\n        this.$router.push(\"/task_list\");\n      } else {\n        // paramからタスクのIDを取得(文字列であることに注意)\n        this.taskId = Number(this.$route.params[\"id\"]);\n        // vuexのストアからタスクIDでタスクを取得する\n        this.task = this.$store.getters.getTaskFromId(this.taskId);\n        console.log(this.task);\n      }\n    },\n    computed: {\n      isSameTaskName() {\n        return this.task.name === this.taskName;\n      },\n    },\n    methods: {\n      /**\n       * タスクを編集するための関数です\n       */\n      async updateTask() {\n        await axios\n          .put(\n            `/api/v1/tasks/${this.task.id}`,\n            {\n              task: {\n                name: this.taskName,\n              },\n            },\n            {\n              headers: {\n                \"access-token\": this.$cookies.get(\"access-token\"),\n                client: this.$cookies.get(\"client\"),\n                uid: this.$cookies.get(\"uid\"),\n              },\n            }\n          )\n          .then((response) => {\n            console.log(response);\n            this.$router.push(\"/task_list\");\n          })\n          .catch((error) => {\n            console.error(error);\n            console.error(error.response);\n            this.errorMessage = error.response.data.errors[0];\n            console.error(this.errorMessage);\n          });\n      },\n      /**\n       * タスクを削除するための関数です\n       */\n      async deleteTask() {\n        await axios\n          .delete(`/api/v1/tasks/${this.task.id}`, {\n            headers: {\n              \"access-token\": this.$cookies.get(\"access-token\"),\n              client: this.$cookies.get(\"client\"),\n              uid: this.$cookies.get(\"uid\"),\n            },\n          })\n          .then((response) => {\n            console.log(response);\n            this.$router.push(\"/task_list\");\n          })\n          .catch((error) => {\n            console.error(error);\n            console.error(error.response);\n            this.errorMessage = error.response.data.errors[0];\n            console.error(this.errorMessage);\n          });\n      },\n    },\n  };\n</script>\n"]},"metadata":{},"sourceType":"module"}