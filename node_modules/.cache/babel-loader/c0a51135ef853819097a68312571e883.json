{"ast":null,"code":"import _asyncToGenerator from \"/app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.keys.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from \"axios\";\nimport moment from \"moment\";\nexport default {\n  data: function data() {\n    return {\n      /**\n       * @type {number} ページネーションのページを指定\n       */\n      page: 1,\n\n      /**\n       * @type {number} ページネーションの一ページあたりに入れるタスクの数を指定\n       */\n      pageSize: 6,\n\n      /**\n       * @type {number} ページネーションのページ数を指定\n       */\n      length: 0,\n\n      /**\n       * @type {Array} ユーザのすべてのタスクを格納\n       */\n      tasks: [],\n\n      /**\n       * @type {String} エラーメッセージを格納\n       */\n      errorMessage: \"\",\n\n      /**\n       * @type {Array} 表示するタスクのリストを格納\n       */\n      displayList: [],\n      loading: {\n        \"0\": false,\n        \"1\": false,\n        \"2\": false,\n        \"3\": false,\n        \"4\": false,\n        \"5\": false\n      },\n      nowLoading: false,\n      complete: {\n        \"0\": false,\n        \"1\": false,\n        \"2\": false,\n        \"3\": false,\n        \"4\": false,\n        \"5\": false\n      },\n      showResult: false,\n      lv: 1,\n      exp: 0,\n      rate: 0,\n      nowLvExp: 0,\n      nowLvMaxExp: 0,\n      isLevelUp: false\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.getTasks();\n\n            case 2:\n              _this.length = Math.ceil(_this.tasks.length / _this.pageSize);\n              _this.displayList = _this.tasks.slice(0, _this.pageSize);\n\n              _this.isDisplayTasksCompeted();\n\n              console.log(_this.displayList);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  methods: {\n    /**\n     * すべてのタスクを取得する関数\n     */\n    getTasks: function getTasks() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return axios.get(\"/api/v1/tasks\", {\n                  headers: {\n                    \"access-token\": _this2.$cookies.get(\"access-token\"),\n                    client: _this2.$cookies.get(\"client\"),\n                    uid: _this2.$cookies.get(\"uid\")\n                  }\n                }).then(function (response) {\n                  console.log(response);\n                  _this2.tasks = response.data.data;\n\n                  _this2.$store.commit(\"setTasks\", response.data.data); // // console.log(this.tasks);\n\n                }).catch(function (error) {\n                  console.error(error);\n                  console.error(error.response);\n                  _this2.errorMessage = error.response.data.errors[0];\n                  console.error(_this2.errorMessage);\n                });\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    pageChange: function pageChange(pageNumber) {\n      this.displayList = this.tasks.slice(this.pageSize * (pageNumber - 1), this.pageSize * pageNumber);\n      this.isDisplayTasksCompeted();\n    },\n\n    /**\n     * タスク達成を記録する関数\n     */\n    record: function record(i, taskId) {\n      var _this3 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this3.loading[String(i)] = true;\n                _this3.nowLoading = true;\n                _context3.next = 4;\n                return axios.post(\"/api/v1/task_records\", {\n                  task: {\n                    id: taskId\n                  }\n                }, {\n                  headers: {\n                    \"access-token\": _this3.$cookies.get(\"access-token\"),\n                    client: _this3.$cookies.get(\"client\"),\n                    uid: _this3.$cookies.get(\"uid\")\n                  }\n                }).then(function (response) {\n                  _this3.displayList[i].last_time = moment().format(\"YYYY-MM-DD\");\n                  console.log(response); // 今のレベル\n\n                  // 今のレベル\n                  var lv = response.data.data.level; // 累計経験値\n\n                  // 累計経験値\n                  var exp = response.data.data.exp; // レベルアップに必要な経験値\n\n                  // レベルアップに必要な経験値\n                  _this3.nowLvMaxExp = Math.round(12 * Math.pow(1.5, lv - 1)); // 今のレベルになってからの経験値\n\n                  // 今のレベルになってからの経験値\n                  _this3.nowLvExp = exp - Math.round(12 * ((1 - Math.pow(1.5, lv - 1)) / (1 - 1.5)));\n                  _this3.isLevelUp = response.data.is_level_up;\n                  _this3.showResult = true;\n                  setTimeout(function () {\n                    _this3.lv = lv;\n                    _this3.exp = exp;\n                    _this3.rate = _this3.nowLvExp / _this3.nowLvMaxExp * 100;\n                  }, 500); // setTimeout(() => {\n                  //   this.showResult = false;\n                  // }, 3000);\n\n                  // setTimeout(() => {\n                  //   this.showResult = false;\n                  // }, 3000);\n                  _this3.complete[String(i)] = true;\n                }).catch(function (error) {\n                  console.error(error);\n                  console.error(error.response);\n                  _this3.errorMessage = error.response.data.errors[0];\n                  console.error(_this3.errorMessage);\n                });\n\n              case 4:\n                _this3.loading[String(i)] = false;\n                _this3.nowLoading = false;\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    },\n\n    /**\n     * 表示されているタスクが達成済みかどうかを判断する\n     */\n    isDisplayTasksCompeted: function isDisplayTasksCompeted() {\n      var _this4 = this;\n\n      Object.keys(this.complete).forEach(function (key) {\n        if (_this4.displayList[key] === undefined) {\n          return;\n        }\n\n        var time = moment(_this4.displayList[key].last_time); // taskのlast_timeがnullでない かつ 前回の記録日の日付が今日の日付と同じかどうか\n\n        if (time.isValid() && time.isSame(moment(), \"day\")) {\n          _this4.complete[key] = true;\n        } else {\n          _this4.complete[key] = false;\n        }\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkGA;AACA;AAEA;AACAA;AAAA;AACA;AACA;AACA;AACAC,aAJA;;AAKA;AACA;AACA;AACAC,iBARA;;AASA;AACA;AACA;AACAC,eAZA;;AAaA;AACA;AACA;AACAC,eAhBA;;AAiBA;AACA;AACA;AACAC,sBApBA;;AAqBA;AACA;AACA;AACAC,qBAxBA;AAyBAC;AACA,kBADA;AAEA,kBAFA;AAGA,kBAHA;AAIA,kBAJA;AAKA,kBALA;AAMA;AANA,OAzBA;AAiCAC,uBAjCA;AAkCAC;AACA,kBADA;AAEA,kBAFA;AAGA,kBAHA;AAIA,kBAJA;AAKA,kBALA;AAMA;AANA,OAlCA;AA0CAC,uBA1CA;AA2CAC,WA3CA;AA4CAC,YA5CA;AA6CAC,aA7CA;AA8CAC,iBA9CA;AA+CAC,oBA/CA;AAgDAC;AAhDA;AAAA,GADA;AAmDAC,SAnDA,qBAmDA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACA,gBADA;;AAAA;AAEA;AACA;;AAEA;;AACAC;;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,GA1DA;AA2DAC;AACA;AACA;AACA;AACAC,YAJA,sBAIA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACAC,MACAC,GADA,CACA,eADA,EACA;AACAC;AACA,uEADA;AAEAC,yDAFA;AAGAC;AAHA;AADA,iBADA,EAQAC,IARA,CAQA;AACAR;AACA;;AACA,uEAHA,CAIA;;AACA,iBAbA,EAcAS,KAdA,CAcA;AACAT;AACAA;AACA;AACAA;AACA,iBAnBA,CADA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA,KAzBA;AA0BAU,cA1BA,sBA0BAC,UA1BA,EA0BA;AACA,0CACA,gCADA,EAEA,0BAFA;AAIA;AACA,KAhCA;;AAiCA;AACA;AACA;AACAC,UApCA,kBAoCAC,CApCA,EAoCAC,MApCA,EAoCA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA,uBAIAX,MACAY,IADA,CAEA,sBAFA,EAGA;AACAC;AACAC;AADA;AADA,iBAHA,EAQA;AACAZ;AACA,uEADA;AAEAC,yDAFA;AAGAC;AAHA;AADA,iBARA,EAgBAC,IAhBA,CAgBA;AACA;AACAR,wCAFA,CAGA;;AAAA;AACA,oDAJA,CAKA;;AAAA;AACA,mDANA,CAOA;;AAAA;AACA,8EARA,CASA;;AAAA;AACA,oCACAN,gEADA;AAEA;AAEA;AACAwB;AACA;AACA;AACA;AACA,mBAJA,EAIA,GAJA,EAfA,CAoBA;AACA;AACA;;AAFA;AACA;AACA;AAEA;AACA,iBAzCA,EA0CAT,KA1CA,CA0CA;AACAT;AACAA;AACA;AACAA;AACA,iBA/CA,CAJA;;AAAA;AAqDA;AACA;;AAtDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuDA,KA3FA;;AA4FA;AACA;AACA;AACAmB,0BA/FA,oCA+FA;AAAA;;AACAC;AACA;AACA;AACA;;AACA,6DAJA,CAMA;;AACA;AACA;AACA,SAFA,MAEA;AACA;AACA;AACA,OAZA;AAaA;AA7GA;AA3DA","names":["data","page","pageSize","length","tasks","errorMessage","displayList","loading","nowLoading","complete","showResult","lv","exp","rate","nowLvExp","nowLvMaxExp","isLevelUp","mounted","console","methods","getTasks","axios","get","headers","client","uid","then","catch","pageChange","pageNumber","record","i","taskId","post","task","id","setTimeout","isDisplayTasksCompeted","Object"],"sourceRoot":"src/components/Record","sources":["RecordPage.vue"],"sourcesContent":["<template>\n  <div>\n    <h1 class=\"text-center mt-5 mb-5\">記録</h1>\n\n    <v-card class=\"mx-auto pb-5 mb-5\" max-width=\"1200\">\n      <v-row>\n        <v-col\n          v-for=\"(task, i) in displayList\"\n          :key=\"i\"\n          align=\"center\"\n          cols=\"12\"\n          sm=\"12\"\n          md=\"6\"\n          lg=\"6\"\n        >\n          <v-card\n            hover\n            :loading=\"loading[String(i)]\"\n            @click=\"complete[String(i)] ? '' : record(i, task.id)\"\n            outlined\n            min-width=\"240\"\n            min-height=\"240\"\n            max-width=\"500\"\n            height=\"100%\"\n          >\n            <template slot=\"progress\">\n              <v-progress-linear\n                color=\"deep-purple\"\n                height=\"10\"\n                indeterminate\n              ></v-progress-linear>\n            </template>\n\n            <v-card-title class=\"justify-center\" v-text=\"task.name\" />\n            <v-spacer />\n            <p v-if=\"!complete[String(i)]\" class=\"text-center\">\n              Click me\n            </p>\n            <v-icon\n              v-if=\"complete[String(i)]\"\n              x-large\n              color=\"success\"\n              class=\"mb-5\"\n              >mdi-check-circle-outline</v-icon\n            >\n          </v-card>\n        </v-col>\n      </v-row>\n      <v-pagination\n        :disabled=\"nowLoading\"\n        v-model=\"page\"\n        :length=\"length\"\n        @input=\"pageChange\"\n      ></v-pagination>\n    </v-card>\n    <v-dialog v-model=\"showResult\" max-width=\"400\">\n      <v-card>\n        <v-card-title>\n          <div>経験値獲得</div>\n        </v-card-title>\n        <v-card-text v-if=\"isLevelUp\" class=\"text-center mt-5 mb-5\">\n          <h1 class=\"primary--text\">Level Up!</h1>\n        </v-card-text>\n        <v-card-text class=\"text-center mb-5\">\n          <v-progress-circular\n            :rotate=\"-90\"\n            :size=\"100\"\n            :width=\"15\"\n            :value=\"lv\"\n            color=\"primary\"\n            class=\"justify-center\"\n          >\n            Lv: {{ lv }}\n          </v-progress-circular>\n        </v-card-text>\n        <v-card-text>\n          <v-progress-linear\n            stream\n            color=\"light-blue\"\n            height=\"20\"\n            buffer-value=\"100\"\n            :value=\"rate\"\n            striped\n          >\n            Exp: {{ nowLvExp }} / {{ nowLvMaxExp }}\n          </v-progress-linear>\n        </v-card-text>\n\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn @click=\"showResult = false\">閉じる</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </div>\n</template>\n\n<script>\n  import axios from \"axios\";\n  import moment from \"moment\";\n\n  export default {\n    data: () => ({\n      /**\n       * @type {number} ページネーションのページを指定\n       */\n      page: 1,\n      /**\n       * @type {number} ページネーションの一ページあたりに入れるタスクの数を指定\n       */\n      pageSize: 6,\n      /**\n       * @type {number} ページネーションのページ数を指定\n       */\n      length: 0,\n      /**\n       * @type {Array} ユーザのすべてのタスクを格納\n       */\n      tasks: [],\n      /**\n       * @type {String} エラーメッセージを格納\n       */\n      errorMessage: \"\",\n      /**\n       * @type {Array} 表示するタスクのリストを格納\n       */\n      displayList: [],\n      loading: {\n        \"0\": false,\n        \"1\": false,\n        \"2\": false,\n        \"3\": false,\n        \"4\": false,\n        \"5\": false,\n      },\n      nowLoading: false,\n      complete: {\n        \"0\": false,\n        \"1\": false,\n        \"2\": false,\n        \"3\": false,\n        \"4\": false,\n        \"5\": false,\n      },\n      showResult: false,\n      lv: 1,\n      exp: 0,\n      rate: 0,\n      nowLvExp: 0,\n      nowLvMaxExp: 0,\n      isLevelUp: false,\n    }),\n    async mounted() {\n      await this.getTasks();\n      this.length = Math.ceil(this.tasks.length / this.pageSize);\n      this.displayList = this.tasks.slice(0, this.pageSize);\n\n      this.isDisplayTasksCompeted();\n      console.log(this.displayList);\n    },\n    methods: {\n      /**\n       * すべてのタスクを取得する関数\n       */\n      async getTasks() {\n        await axios\n          .get(\"/api/v1/tasks\", {\n            headers: {\n              \"access-token\": this.$cookies.get(\"access-token\"),\n              client: this.$cookies.get(\"client\"),\n              uid: this.$cookies.get(\"uid\"),\n            },\n          })\n          .then((response) => {\n            console.log(response);\n            this.tasks = response.data.data;\n            this.$store.commit(\"setTasks\", response.data.data);\n            // // console.log(this.tasks);\n          })\n          .catch((error) => {\n            console.error(error);\n            console.error(error.response);\n            this.errorMessage = error.response.data.errors[0];\n            console.error(this.errorMessage);\n          });\n      },\n      pageChange(pageNumber) {\n        this.displayList = this.tasks.slice(\n          this.pageSize * (pageNumber - 1),\n          this.pageSize * pageNumber\n        );\n        this.isDisplayTasksCompeted();\n      },\n      /**\n       * タスク達成を記録する関数\n       */\n      async record(i, taskId) {\n        this.loading[String(i)] = true;\n        this.nowLoading = true;\n\n        await axios\n          .post(\n            \"/api/v1/task_records\",\n            {\n              task: {\n                id: taskId,\n              },\n            },\n            {\n              headers: {\n                \"access-token\": this.$cookies.get(\"access-token\"),\n                client: this.$cookies.get(\"client\"),\n                uid: this.$cookies.get(\"uid\"),\n              },\n            }\n          )\n          .then((response) => {\n            this.displayList[i].last_time = moment().format(\"YYYY-MM-DD\");\n            console.log(response);\n            // 今のレベル\n            const lv = response.data.data.level;\n            // 累計経験値\n            const exp = response.data.data.exp;\n            // レベルアップに必要な経験値\n            this.nowLvMaxExp = Math.round(12 * 1.5 ** (lv - 1));\n            // 今のレベルになってからの経験値\n            this.nowLvExp =\n              exp - Math.round(12 * ((1 - 1.5 ** (lv - 1)) / (1 - 1.5)));\n            this.isLevelUp = response.data.is_level_up;\n\n            this.showResult = true;\n            setTimeout(() => {\n              this.lv = lv;\n              this.exp = exp;\n              this.rate = (this.nowLvExp / this.nowLvMaxExp) * 100;\n            }, 500);\n            // setTimeout(() => {\n            //   this.showResult = false;\n            // }, 3000);\n\n            this.complete[String(i)] = true;\n          })\n          .catch((error) => {\n            console.error(error);\n            console.error(error.response);\n            this.errorMessage = error.response.data.errors[0];\n            console.error(this.errorMessage);\n          });\n\n        this.loading[String(i)] = false;\n        this.nowLoading = false;\n      },\n      /**\n       * 表示されているタスクが達成済みかどうかを判断する\n       */\n      isDisplayTasksCompeted() {\n        Object.keys(this.complete).forEach((key) => {\n          if (this.displayList[key] === undefined) {\n            return;\n          }\n          const time = moment(this.displayList[key].last_time);\n\n          // taskのlast_timeがnullでない かつ 前回の記録日の日付が今日の日付と同じかどうか\n          if (time.isValid() && time.isSame(moment(), \"day\")) {\n            this.complete[key] = true;\n          } else {\n            this.complete[key] = false;\n          }\n        });\n      },\n    },\n  };\n</script>\n<style>\n  .v-card--hover {\n    margin: 0;\n  }\n</style>\n"]},"metadata":{},"sourceType":"module"}