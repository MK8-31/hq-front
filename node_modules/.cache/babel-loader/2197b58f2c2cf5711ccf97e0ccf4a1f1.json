{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport Vue from \"vue\";\nimport Vuex from \"vuex\";\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    /**\n     * ログインをしているかどうか\n     */\n    loggedIn: false,\n\n    /**\n     * ユーザのすべてのタスクを格納\n     */\n    tasks: [],\n\n    /**\n     * ログイン状態の保持に必要なリクエストヘッダー\n     */\n    requestHeadersRequiredToMaintainLoginStatus: {\n      /**\n       * ログイン状態の確認に必要なアクセストークン\n       */\n      accessToken: \"\",\n\n      /**\n       * ログイン状態の確認に必要なクライアント\n       */\n      client: \"\",\n\n      /**\n       * ログイン状態の確認に必要なuid\n       */\n      uid: \"\"\n    }\n  },\n  getters: {\n    getLoggedIn: function getLoggedIn(state) {\n      return state.loggedIn;\n    },\n\n    /**\n     * tasks配列からidを使用して目的のタスクを見つける関数\n     * @param {Object} state state\n     * @param {Number} task_id 目的のタスクのid\n     * @return {Object} task 目的のタスク\n     */\n    getTaskFromId: function getTaskFromId(state) {\n      return function (task_id) {\n        var targetTask = {};\n        state.tasks.forEach(function (task) {\n          if (task.id === task_id) {\n            console.log(true);\n            targetTask = task;\n          }\n        });\n        return targetTask;\n      };\n    },\n\n    /**\n     * すべてのタスクを返す関数\n     * @param {Object} state state\n     * @return {Object} すべてのタスク配列\n     */\n    getTasks: function getTasks(state) {\n      return state.tasks;\n    }\n  },\n  mutations: {\n    setLoggedIn: function setLoggedIn(state, value) {\n      state.loggedIn = value;\n    },\n    setTasks: function setTasks(state, value) {\n      state.tasks = value;\n    },\n    setRequestHeadersRequiredToMaintainLoginStatus: function setRequestHeadersRequiredToMaintainLoginStatus(state, accessToken, client, uid) {\n      state.requestHeadersRequiredToMaintainLoginStatus.accessToken = accessToken;\n      state.requestHeadersRequiredToMaintainLoginStatus.client = client;\n      state.requestHeadersRequiredToMaintainLoginStatus.uid = uid;\n    }\n  }\n});","map":{"version":3,"sources":["/app/src/store/store.js"],"names":["Vue","Vuex","use","Store","state","loggedIn","tasks","requestHeadersRequiredToMaintainLoginStatus","accessToken","client","uid","getters","getLoggedIn","getTaskFromId","task_id","targetTask","forEach","task","id","console","log","getTasks","mutations","setLoggedIn","value","setTasks","setRequestHeadersRequiredToMaintainLoginStatus"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEAD,GAAG,CAACE,GAAJ,CAAQD,IAAR;AAEA,eAAe,IAAIA,IAAI,CAACE,KAAT,CAAe;AAC5BC,EAAAA,KAAK,EAAE;AACL;AACJ;AACA;AACIC,IAAAA,QAAQ,EAAE,KAJL;;AAKL;AACJ;AACA;AACIC,IAAAA,KAAK,EAAE,EARF;;AASL;AACJ;AACA;AACIC,IAAAA,2CAA2C,EAAE;AAC3C;AACN;AACA;AACMC,MAAAA,WAAW,EAAE,EAJ8B;;AAK3C;AACN;AACA;AACMC,MAAAA,MAAM,EAAE,EARmC;;AAS3C;AACN;AACA;AACMC,MAAAA,GAAG,EAAE;AAZsC;AAZxC,GADqB;AA4B5BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,WADO,uBACKR,KADL,EACY;AACjB,aAAOA,KAAK,CAACC,QAAb;AACD,KAHM;;AAIP;AACJ;AACA;AACA;AACA;AACA;AACIQ,IAAAA,aAAa,EAAE,uBAACT,KAAD;AAAA,aAAW,UAACU,OAAD,EAAa;AACrC,YAAIC,UAAU,GAAG,EAAjB;AACAX,QAAAA,KAAK,CAACE,KAAN,CAAYU,OAAZ,CAAoB,UAACC,IAAD,EAAU;AAC5B,cAAIA,IAAI,CAACC,EAAL,KAAYJ,OAAhB,EAAyB;AACvBK,YAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACAL,YAAAA,UAAU,GAAGE,IAAb;AACD;AACF,SALD;AAOA,eAAOF,UAAP;AACD,OAVc;AAAA,KAVR;;AAqBP;AACJ;AACA;AACA;AACA;AACIM,IAAAA,QA1BO,oBA0BEjB,KA1BF,EA0BS;AACd,aAAOA,KAAK,CAACE,KAAb;AACD;AA5BM,GA5BmB;AA0D5BgB,EAAAA,SAAS,EAAE;AACTC,IAAAA,WADS,uBACGnB,KADH,EACUoB,KADV,EACiB;AACxBpB,MAAAA,KAAK,CAACC,QAAN,GAAiBmB,KAAjB;AACD,KAHQ;AAITC,IAAAA,QAJS,oBAIArB,KAJA,EAIOoB,KAJP,EAIc;AACrBpB,MAAAA,KAAK,CAACE,KAAN,GAAckB,KAAd;AACD,KANQ;AAOTE,IAAAA,8CAPS,0DAQPtB,KARO,EASPI,WATO,EAUPC,MAVO,EAWPC,GAXO,EAYP;AACAN,MAAAA,KAAK,CAACG,2CAAN,CAAkDC,WAAlD,GAAgEA,WAAhE;AACAJ,MAAAA,KAAK,CAACG,2CAAN,CAAkDE,MAAlD,GAA2DA,MAA3D;AACAL,MAAAA,KAAK,CAACG,2CAAN,CAAkDG,GAAlD,GAAwDA,GAAxD;AACD;AAhBQ;AA1DiB,CAAf,CAAf","sourcesContent":["import Vue from \"vue\";\nimport Vuex from \"vuex\";\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n  state: {\n    /**\n     * ログインをしているかどうか\n     */\n    loggedIn: false,\n    /**\n     * ユーザのすべてのタスクを格納\n     */\n    tasks: [],\n    /**\n     * ログイン状態の保持に必要なリクエストヘッダー\n     */\n    requestHeadersRequiredToMaintainLoginStatus: {\n      /**\n       * ログイン状態の確認に必要なアクセストークン\n       */\n      accessToken: \"\",\n      /**\n       * ログイン状態の確認に必要なクライアント\n       */\n      client: \"\",\n      /**\n       * ログイン状態の確認に必要なuid\n       */\n      uid: \"\",\n    },\n  },\n  getters: {\n    getLoggedIn(state) {\n      return state.loggedIn;\n    },\n    /**\n     * tasks配列からidを使用して目的のタスクを見つける関数\n     * @param {Object} state state\n     * @param {Number} task_id 目的のタスクのid\n     * @return {Object} task 目的のタスク\n     */\n    getTaskFromId: (state) => (task_id) => {\n      let targetTask = {};\n      state.tasks.forEach((task) => {\n        if (task.id === task_id) {\n          console.log(true);\n          targetTask = task;\n        }\n      });\n\n      return targetTask;\n    },\n    /**\n     * すべてのタスクを返す関数\n     * @param {Object} state state\n     * @return {Object} すべてのタスク配列\n     */\n    getTasks(state) {\n      return state.tasks;\n    },\n  },\n  mutations: {\n    setLoggedIn(state, value) {\n      state.loggedIn = value;\n    },\n    setTasks(state, value) {\n      state.tasks = value;\n    },\n    setRequestHeadersRequiredToMaintainLoginStatus(\n      state,\n      accessToken,\n      client,\n      uid\n    ) {\n      state.requestHeadersRequiredToMaintainLoginStatus.accessToken = accessToken;\n      state.requestHeadersRequiredToMaintainLoginStatus.client = client;\n      state.requestHeadersRequiredToMaintainLoginStatus.uid = uid;\n    },\n  },\n});\n"]},"metadata":{},"sourceType":"module"}