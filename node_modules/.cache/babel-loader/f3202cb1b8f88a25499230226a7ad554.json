{"ast":null,"code":"import _asyncToGenerator from \"/app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from \"axios\";\nimport moment from \"moment\";\nexport default {\n  data: function data() {\n    return {\n      lv: 1,\n      lvRate: 0,\n      exp: 0,\n      expRate: 0\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.getRecord();\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  methods: {\n    /**\n     * すべてのタスクを取得する関数\n     */\n    getRecord: function getRecord() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return axios.get(\"/api/v1/records/show\", {\n                  headers: {\n                    \"access-token\": _this2.$cookies.get(\"access-token\"),\n                    client: _this2.$cookies.get(\"client\"),\n                    uid: _this2.$cookies.get(\"uid\")\n                  }\n                }).then(function (response) {\n                  console.log(response);\n                  _this2.lv = response.data.data.level;\n                  _this2.exp = response.data.data.exp;\n                  _this2.lvRate = _this2.lv / 99; // レベルアップに必要な経験値\n\n                  // レベルアップに必要な経験値\n                  _this2.nowLvMaxExp = Math.round(12 * Math.pow(1.5, lv - 1)); // 今のレベルになってからの経験値\n\n                  // 今のレベルになってからの経験値\n                  _this2.nowLvExp = exp - Math.round(12 * ((1 - Math.pow(1.5, lv - 1)) / (1 - 1.5)));\n                  _this2.isLevelUp = response.data.is_level_up;\n                }).catch(function (error) {\n                  console.error(error);\n                  console.error(error.response);\n                  _this2.errorMessage = error.response.data.errors[0];\n                  console.error(_this2.errorMessage);\n                });\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;AACA;AAEA;AACAA;AAAA;AACAC,WADA;AAEAC,eAFA;AAGAC,YAHA;AAIAC;AAJA;AAAA,GADA;AAOAC,SAPA,qBAOA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACA,iBADA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,GATA;AAUAC;AACA;AACA;AACA;AACAC,aAJA,uBAIA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACAC,MACAC,GADA,CACA,sBADA,EACA;AACAC;AACA,uEADA;AAEAC,yDAFA;AAGAC;AAHA;AADA,iBADA,EAQAC,IARA,CAQA;AACAC;AACA;AACA;AACA,iDAJA,CAKA;;AAAA;AACA,8EANA,CAOA;;AAAA;AACA,oCACAX,gEADA;AAEA;AACA,iBAnBA,EAoBAY,KApBA,CAoBA;AACAD;AACAA;AACA;AACAA;AACA,iBAzBA,CADA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BA;AA/BA;AAVA","names":["data","lv","lvRate","exp","expRate","mounted","methods","getRecord","axios","get","headers","client","uid","then","console","catch"],"sourceRoot":"src/components","sources":["ShowRecordPage.vue"],"sourcesContent":["<template>\n  <div>\n    <h1 class=\"text-center mt-5 mb-5\">記録を見る</h1>\n    <v-card elevation=\"0\" class=\"mt-2 mb-6 mx-1\">\n      <v-progress-circular\n        :rotate=\"-90\"\n        :size=\"140\"\n        :width=\"11\"\n        :value=\"this.lvRate\"\n        color=\"primary\"\n      >\n        <div class=\"d-flex flex-column black--text\">\n          <p\n            class=\"pb-0 ma-0 text-h7 black--text text-center text--secondary font-weight-bold\"\n          >\n            Lv:\n          </p>\n          <div class=\"d-flex pt-2 pl-2\">\n            <p class=\"text-h5 text--primary mt-auto mb-0 pb-0\">\n              {{ this.lv }}\n            </p>\n            <p class=\"mt-auto mb-0 pb-0\">/99</p>\n          </div>\n        </div>\n      </v-progress-circular>\n    </v-card>\n  </div>\n</template>\n\n<script>\n  import axios from \"axios\";\n  import moment from \"moment\";\n\n  export default {\n    data: () => ({\n      lv: 1,\n      lvRate: 0,\n      exp: 0,\n      expRate: 0,\n    }),\n    async mounted() {\n      await this.getRecord();\n    },\n    methods: {\n      /**\n       * すべてのタスクを取得する関数\n       */\n      async getRecord() {\n        await axios\n          .get(\"/api/v1/records/show\", {\n            headers: {\n              \"access-token\": this.$cookies.get(\"access-token\"),\n              client: this.$cookies.get(\"client\"),\n              uid: this.$cookies.get(\"uid\"),\n            },\n          })\n          .then((response) => {\n            console.log(response);\n            this.lv = response.data.data.level;\n            this.exp = response.data.data.exp;\n            this.lvRate = this.lv / 99;\n            // レベルアップに必要な経験値\n            this.nowLvMaxExp = Math.round(12 * 1.5 ** (lv - 1));\n            // 今のレベルになってからの経験値\n            this.nowLvExp =\n              exp - Math.round(12 * ((1 - 1.5 ** (lv - 1)) / (1 - 1.5)));\n            this.isLevelUp = response.data.is_level_up;\n          })\n          .catch((error) => {\n            console.error(error);\n            console.error(error.response);\n            this.errorMessage = error.response.data.errors[0];\n            console.error(this.errorMessage);\n          });\n      },\n    },\n  };\n</script>\n<style>\n  .v-card--hover {\n    margin: 0;\n  }\n</style>\n"]},"metadata":{},"sourceType":"module"}