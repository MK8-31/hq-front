{"ast":null,"code":"import _asyncToGenerator from \"/app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.function.name.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from \"axios\";\nexport default {\n  data: function data() {\n    return {\n      task: {},\n      task_name: \"\"\n    };\n  },\n  mounted: function mounted() {\n    if (this.$store.getters.getTasks.length == 0 || !this.$route.params[\"id\"]) {\n      this.$router.push(\"/task_list\");\n    } else {\n      // paramからタスクのIDを取得(文字列であることに注意)\n      var task_id = Number(this.$route.params[\"id\"]); // vuexのストアからタスクIDでタスクを取得する\n\n      this.task = this.$store.getters.getTaskFromId(task_id);\n      console.log(this.task);\n      this.task_name = this.task.name;\n    }\n  },\n  methods: {\n    /**\n     * タスクを編集するための関数です\n     */\n    updateTask: function updateTask() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios.put(\"/api/v1/tasks/\".concat(_this.task.id), {\n                  headers: {\n                    \"access-token\": _this.$cookies.get(\"access-token\"),\n                    client: _this.$cookies.get(\"client\"),\n                    uid: _this.$cookies.get(\"uid\")\n                  }\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n\n    /**\n     * タスクを削除するための関数です\n     */\n    deleteTask: function deleteTask() {\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", null);\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;AAEA;AACAA;AAAA;AACAC,cADA;AAEAC;AAFA;AAAA,GADA;AAKAC,SALA,qBAKA;AACA,QACA,4CACA,yBAFA,EAGA;AACA;AACA,KALA,MAKA;AACA;AACA,qDAFA,CAGA;;AACA;AACAC;AACA;AACA;AACA,GAnBA;AAoBAC;AACA;AACA;AACA;AACAC,cAJA,wBAIA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACAC;AACAC;AACA,sEADA;AAEAC,wDAFA;AAGAC;AAHA;AADA,kBADA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,KAZA;;AAaA;AACA;AACA;AACAC,cAhBA,wBAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDACA,IADA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAlBA;AApBA","names":["data","task","task_name","mounted","console","methods","updateTask","axios","headers","client","uid","deleteTask"],"sourceRoot":"src/components","sources":["TaskPage.vue"],"sourcesContent":["<template>\n  <div>\n    <h1 class=\"text-center mt-5 mb-5\">タスク</h1>\n    <v-card class=\"mx-auto px-5 py-5\" max-width=\"500\">\n      <v-form ref=\"form\" width=\"400\">\n        <v-text-field\n          v-model=\"task_name\"\n          :counter=\"30\"\n          label=\"Name\"\n          required\n        ></v-text-field>\n\n        <v-btn color=\"primary\" class=\"mr-4\" @click=\"updateTask\">\n          更新\n        </v-btn>\n        <v-btn color=\"error\" @click=\"deleteTask\">削除</v-btn>\n      </v-form>\n    </v-card>\n  </div>\n</template>\n\n<script>\n  import axios from \"axios\";\n\n  export default {\n    data: () => ({\n      task: {},\n      task_name: \"\",\n    }),\n    mounted() {\n      if (\n        this.$store.getters.getTasks.length == 0 ||\n        !this.$route.params[\"id\"]\n      ) {\n        this.$router.push(\"/task_list\");\n      } else {\n        // paramからタスクのIDを取得(文字列であることに注意)\n        const task_id = Number(this.$route.params[\"id\"]);\n        // vuexのストアからタスクIDでタスクを取得する\n        this.task = this.$store.getters.getTaskFromId(task_id);\n        console.log(this.task);\n        this.task_name = this.task.name;\n      }\n    },\n    methods: {\n      /**\n       * タスクを編集するための関数です\n       */\n      async updateTask() {\n        await axios.put(`/api/v1/tasks/${this.task.id}`, {\n          headers: {\n            \"access-token\": this.$cookies.get(\"access-token\"),\n            client: this.$cookies.get(\"client\"),\n            uid: this.$cookies.get(\"uid\"),\n          },\n        });\n      },\n      /**\n       * タスクを削除するための関数です\n       */\n      async deleteTask() {\n        return null;\n      },\n    },\n  };\n</script>\n"]},"metadata":{},"sourceType":"module"}