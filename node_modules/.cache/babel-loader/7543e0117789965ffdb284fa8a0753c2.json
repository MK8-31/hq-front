{"ast":null,"code":"import _asyncToGenerator from \"/app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"regenerator-runtime/runtime.js\";\n//\n//\n//\n//\n//\n//\nimport axios from \"axios\";\nimport moment from \"moment\";\nexport default {\n  data: function data() {\n    return {};\n  },\n  mounted: function mounted() {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  methods: {\n    /**\n     * すべてのタスクを取得する関数\n     */\n    getTasks: function getTasks() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return axios.get(\"/api/v1/tasks\", {\n                  headers: {\n                    \"access-token\": _this.$cookies.get(\"access-token\"),\n                    client: _this.$cookies.get(\"client\"),\n                    uid: _this.$cookies.get(\"uid\")\n                  }\n                }).then(function (response) {\n                  console.log(response);\n                  _this.tasks = response.data.data;\n\n                  _this.$store.commit(\"setTasks\", response.data.data); // // console.log(this.tasks);\n\n                }).catch(function (error) {\n                  console.error(error);\n                  console.error(error.response);\n                  _this.errorMessage = error.response.data.errors[0];\n                  console.error(_this.errorMessage);\n                });\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    pageChange: function pageChange(pageNumber) {\n      this.displayList = this.tasks.slice(this.pageSize * (pageNumber - 1), this.pageSize * pageNumber);\n      this.isDisplayTasksCompeted();\n    },\n\n    /**\n     * タスク達成を記録する関数\n     */\n    record: function record(i, taskId) {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this2.loading[String(i)] = true;\n                _this2.nowLoading = true;\n                _context3.next = 4;\n                return axios.post(\"/api/v1/records/show\", {\n                  headers: {\n                    \"access-token\": _this2.$cookies.get(\"access-token\"),\n                    client: _this2.$cookies.get(\"client\"),\n                    uid: _this2.$cookies.get(\"uid\")\n                  }\n                }).then(function (response) {\n                  _this2.displayList[i].last_time = moment().format(\"YYYY-MM-DD\");\n                  console.log(response); // 今のレベル\n\n                  // 今のレベル\n                  var lv = response.data.data.level;\n                }).catch(function (error) {\n                  console.error(error);\n                  console.error(error.response);\n                  _this2.errorMessage = error.response.data.errors[0];\n                  console.error(_this2.errorMessage);\n                });\n\n              case 4:\n                _this2.loading[String(i)] = false;\n                _this2.nowLoading = false;\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;AAOA;AACA;AAEA;AACAA;AAAA;AAAA,GADA;AAEAC,SAFA,qBAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFA;AAGAC;AACA;AACA;AACA;AACAC,YAJA,sBAIA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACAC,MACAC,GADA,CACA,eADA,EACA;AACAC;AACA,sEADA;AAEAC,wDAFA;AAGAC;AAHA;AADA,iBADA,EAQAC,IARA,CAQA;AACAC;AACA;;AACA,sEAHA,CAIA;;AACA,iBAbA,EAcAC,KAdA,CAcA;AACAD;AACAA;AACA;AACAA;AACA,iBAnBA,CADA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA,KAzBA;AA0BAE,cA1BA,sBA0BAC,UA1BA,EA0BA;AACA,0CACA,gCADA,EAEA,0BAFA;AAIA;AACA,KAhCA;;AAiCA;AACA;AACA;AACAC,UApCA,kBAoCAC,CApCA,EAoCAC,MApCA,EAoCA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA,uBAIAZ,MACAa,IADA,CACA,sBADA,EACA;AACAX;AACA,uEADA;AAEAC,yDAFA;AAGAC;AAHA;AADA,iBADA,EAQAC,IARA,CAQA;AACA;AACAC,wCAFA,CAGA;;AAAA;AACA;AACA,iBAbA,EAcAC,KAdA,CAcA;AACAD;AACAA;AACA;AACAA;AACA,iBAnBA,CAJA;;AAAA;AAyBA;AACA;;AA1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BA;AA/DA;AAHA","names":["data","mounted","methods","getTasks","axios","get","headers","client","uid","then","console","catch","pageChange","pageNumber","record","i","taskId","post"],"sourceRoot":"src/components","sources":["ShowRecordPage.vue"],"sourcesContent":["<template>\n  <div>\n    <h1 class=\"text-center mt-5 mb-5\">記録を見る</h1>\n  </div>\n</template>\n\n<script>\n  import axios from \"axios\";\n  import moment from \"moment\";\n\n  export default {\n    data: () => ({}),\n    async mounted() {},\n    methods: {\n      /**\n       * すべてのタスクを取得する関数\n       */\n      async getTasks() {\n        await axios\n          .get(\"/api/v1/tasks\", {\n            headers: {\n              \"access-token\": this.$cookies.get(\"access-token\"),\n              client: this.$cookies.get(\"client\"),\n              uid: this.$cookies.get(\"uid\"),\n            },\n          })\n          .then((response) => {\n            console.log(response);\n            this.tasks = response.data.data;\n            this.$store.commit(\"setTasks\", response.data.data);\n            // // console.log(this.tasks);\n          })\n          .catch((error) => {\n            console.error(error);\n            console.error(error.response);\n            this.errorMessage = error.response.data.errors[0];\n            console.error(this.errorMessage);\n          });\n      },\n      pageChange(pageNumber) {\n        this.displayList = this.tasks.slice(\n          this.pageSize * (pageNumber - 1),\n          this.pageSize * pageNumber\n        );\n        this.isDisplayTasksCompeted();\n      },\n      /**\n       * タスク達成を記録する関数\n       */\n      async record(i, taskId) {\n        this.loading[String(i)] = true;\n        this.nowLoading = true;\n\n        await axios\n          .post(\"/api/v1/records/show\", {\n            headers: {\n              \"access-token\": this.$cookies.get(\"access-token\"),\n              client: this.$cookies.get(\"client\"),\n              uid: this.$cookies.get(\"uid\"),\n            },\n          })\n          .then((response) => {\n            this.displayList[i].last_time = moment().format(\"YYYY-MM-DD\");\n            console.log(response);\n            // 今のレベル\n            const lv = response.data.data.level;\n          })\n          .catch((error) => {\n            console.error(error);\n            console.error(error.response);\n            this.errorMessage = error.response.data.errors[0];\n            console.error(this.errorMessage);\n          });\n\n        this.loading[String(i)] = false;\n        this.nowLoading = false;\n      },\n    },\n  };\n</script>\n<style>\n  .v-card--hover {\n    margin: 0;\n  }\n</style>\n"]},"metadata":{},"sourceType":"module"}